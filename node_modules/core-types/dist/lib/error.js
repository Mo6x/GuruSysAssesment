export class CoreTypesError extends Error {
    constructor(message, meta = {}) {
        super(message);
        Object.setPrototypeOf(this, CoreTypesError.prototype);
        this.blob = meta.blob;
        this.path = meta.path;
        this.loc = meta.loc;
        this.source = meta.source;
        this.filename = meta.filename;
        this.relatedError = meta.relatedError;
    }
}
export class MalformedTypeError extends CoreTypesError {
    constructor(message, meta = {}) {
        super(message, meta);
        Object.setPrototypeOf(this, MalformedTypeError.prototype);
    }
}
export class MissingReferenceError extends CoreTypesError {
    constructor(ref, meta = {}) {
        super(`Reference to missing type "${ref}"`, meta);
        Object.setPrototypeOf(this, MissingReferenceError.prototype);
    }
}
export class UnsupportedError extends CoreTypesError {
    constructor(message, meta = {}) {
        super(message, meta);
        Object.setPrototypeOf(this, UnsupportedError.prototype);
    }
}
export class RelatedError extends CoreTypesError {
    constructor(err, meta = {}) {
        super(err.message, { ...meta, relatedError: err });
        Object.setPrototypeOf(this, RelatedError.prototype);
    }
}
export function throwUnsupportedError(msg, node, path) {
    throw new UnsupportedError(msg, {
        blob: node,
        ...(node.loc ? { loc: node.loc } : {}),
        ...(path ? { path } : {}),
    });
}
export function throwRelatedError(err, meta) {
    throw new RelatedError(err, meta);
}
export function isCoreTypesError(err) {
    return err instanceof CoreTypesError;
}
export function decorateErrorMeta(target, source) {
    if (source.blob)
        target.blob ?? (target.blob = source.blob);
    if (source.path)
        target.path ?? (target.path = source.path);
    if (source.loc)
        target.loc ?? (target.loc = source.loc);
    if (source.source)
        target.source ?? (target.source = source.source);
    if (source.filename)
        target.filename ?? (target.filename = source.filename);
    return target;
}
export function decorateError(err, meta) {
    if (isCoreTypesError(err))
        decorateErrorMeta(err, meta);
    return err;
}
